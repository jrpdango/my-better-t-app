generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  ADMIN
  NORMAL
}

enum PageStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LicenseType {
  BASIC
  PREMIUM
  ENTERPRISE
}

enum SiteUserRole {
  ADMIN
  MEMBER
}

// Core Tables
model Company {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  industry  String?
  website   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  tenants Tenant[]

  @@index([name])
  @@index([industry])
  @@map("companies")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  companyId String   @map("company_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  company        Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  users          User[]
  sites          Site[]
  pages          Page[]
  assets         Asset[]
  navigation     Navigation[]
  themes         Theme[]
  tenantLicenses TenantLicense[]

  @@index([companyId])
  @@index([name])
  @@map("tenants")
}

model User {
  id       String   @id @default(cuid())
  clerkId  String   @unique @map("clerk_id")
  email    String   @unique
  role     UserRole @default(NORMAL)
  tenantId String   @map("tenant_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relationships
  tenant         Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdSites   Site[]     @relation("SiteCreatedBy")
  createdPages   Page[]     @relation("PageCreatedBy")
  createdVersions PageVersion[] @relation("VersionCreatedBy")
  uploadedAssets Asset[]    @relation("AssetUploadedBy")
  siteUsers      SiteUser[]

  @@index([tenantId])
  @@index([role])
  @@index([tenantId, role])
  @@map("users")
}

model Site {
  id          String   @id @default(cuid())
  name        String
  slug        String
  description String?  @db.Text
  tenantId    String   @map("tenant_id")
  createdBy   String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relationships
  tenant     Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator    User        @relation("SiteCreatedBy", fields: [createdBy], references: [id])
  pages      Page[]
  assets     Asset[]
  navigation Navigation?
  theme      Theme?
  siteUsers  SiteUser[]

  @@unique([tenantId, slug])
  @@index([tenantId])
  @@index([createdBy])
  @@index([name])
  @@index([tenantId, name])
  @@map("sites")
}

model Page {
  id        String     @id @default(cuid())
  title     String
  slug      String
  content   Json?
  status    PageStatus @default(DRAFT)
  siteId    String     @map("site_id")
  tenantId  String     @map("tenant_id")
  createdBy String     @map("created_by")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  // Relationships
  site     Site          @relation(fields: [siteId], references: [id], onDelete: Cascade)
  tenant   Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator  User          @relation("PageCreatedBy", fields: [createdBy], references: [id])
  versions PageVersion[]

  @@unique([siteId, slug])
  @@index([siteId])
  @@index([tenantId])
  @@index([status])
  @@index([createdBy])
  @@index([siteId, status])
  @@index([tenantId, status])
  @@map("pages")
}

model PageVersion {
  id            String     @id @default(cuid())
  pageId        String     @map("page_id")
  versionNumber Int        @map("version_number")
  title         String
  content       Json?
  status        PageStatus @default(DRAFT)
  createdBy     String     @map("created_by")
  createdAt     DateTime   @default(now()) @map("created_at")
  isCurrent     Boolean    @default(false) @map("is_current")

  // Relationships
  page    Page @relation(fields: [pageId], references: [id], onDelete: Cascade)
  creator User @relation("VersionCreatedBy", fields: [createdBy], references: [id])

  @@unique([pageId, versionNumber])
  @@index([pageId])
  @@index([isCurrent])
  @@index([pageId, isCurrent])
  @@map("page_versions")
}

model Navigation {
  id        String   @id @default(cuid())
  siteId    String   @unique @map("site_id")
  tenantId  String   @map("tenant_id")
  structure Json
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  site   Site   @relation(fields: [siteId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("navigation")
}

model Asset {
  id         String   @id @default(cuid())
  name       String
  filePath   String   @map("file_path")
  fileType   String   @map("file_type")
  fileSize   Int      @map("file_size")
  siteId     String   @map("site_id")
  tenantId   String   @map("tenant_id")
  uploadedBy String   @map("uploaded_by")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relationships
  site     Site   @relation(fields: [siteId], references: [id], onDelete: Cascade)
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  uploader User   @relation("AssetUploadedBy", fields: [uploadedBy], references: [id])

  @@index([siteId])
  @@index([tenantId])
  @@index([fileType])
  @@index([uploadedBy])
  @@index([siteId, fileType])
  @@index([tenantId, fileType])
  @@map("assets")
}

model Theme {
  id             String   @id @default(cuid())
  siteId         String   @unique @map("site_id")
  tenantId       String   @map("tenant_id")
  primaryColor   String   @map("primary_color")
  secondaryColor String   @map("secondary_color")
  customCss      String?  @db.Text @map("custom_css")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relationships
  site   Site   @relation(fields: [siteId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("themes")
}

model TenantLicense {
  id           String      @id @default(cuid())
  tenantId     String      @map("tenant_id")
  licenseType  LicenseType @map("license_type")
  maxSites     Int         @map("max_sites")
  maxUsers     Int         @map("max_users")
  maxStorageGb Int         @map("max_storage_gb")
  startDate    DateTime    @map("start_date")
  endDate      DateTime    @map("end_date")
  isActive     Boolean     @default(true) @map("is_active")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  // Relationships
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([isActive])
  @@index([licenseType])
  @@index([tenantId, isActive])
  @@map("tenant_licenses")
}

model SiteUser {
  siteId    String       @map("site_id")
  userId    String       @map("user_id")
  role      SiteUserRole @default(MEMBER)
  createdAt DateTime     @default(now()) @map("created_at")

  // Relationships
  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([siteId, userId])
  @@map("site_users")
}
